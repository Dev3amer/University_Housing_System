// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UniversityHousingSystem.Infrastructure.Context;

#nullable disable

namespace UniversityHousingSystem.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250422233105_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnswerId"));

                    b.Property<string>("AnswerText")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("OptionId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("ResponseId")
                        .HasColumnType("int");

                    b.HasKey("AnswerId");

                    b.HasIndex("OptionId");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.HasIndex("ResponseId", "QuestionId")
                        .IsUnique()
                        .HasDatabaseName("IX_Answer_Response_Question");

                    b.ToTable("Answers", (string)null);
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Application", b =>
                {
                    b.Property<int>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationId"));

                    b.Property<string>("AIValidationStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValue("Pending");

                    b.Property<string>("AdminNotes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FinalStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValue("Pending");

                    b.Property<DateTime>("SubmitDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("ApplicationId");

                    b.HasIndex("AIValidationStatus");

                    b.HasIndex("FinalStatus");

                    b.HasIndex("SubmitDate");

                    b.ToTable("Applications", (string)null);
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Attendance", b =>
                {
                    b.Property<int>("AttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttendanceId"));

                    b.Property<DateTime>("DateAndTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("EntryType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("AttendanceId");

                    b.HasIndex("StudentId");

                    b.ToTable("Attendances", (string)null);
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Building", b =>
                {
                    b.Property<int>("BuildingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BuildingId"));

                    b.Property<string>("AddressInDetails")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar");

                    b.Property<string>("MapSearchText")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("VillageId")
                        .HasColumnType("int");

                    b.HasKey("BuildingId");

                    b.HasIndex("VillageId");

                    b.ToTable("Buildings", (string)null);
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<int>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CityId");

                    b.HasIndex("GovernorateId", "NameAr")
                        .IsUnique();

                    b.HasIndex("GovernorateId", "NameEn")
                        .IsUnique();

                    b.ToTable("Cities", (string)null);
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.College", b =>
                {
                    b.Property<int>("CollegeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CollegeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CollegeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Colleges", (string)null);
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.CollegeDepartment", b =>
                {
                    b.Property<int>("CollegeDepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CollegeDepartmentId"));

                    b.Property<int>("CollegeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CollegeDepartmentId");

                    b.HasIndex("CollegeId", "Name")
                        .IsUnique();

                    b.ToTable("CollegeDepartments", (string)null);
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CountryId");

                    b.HasIndex("NameAr")
                        .IsUnique();

                    b.HasIndex("NameEn")
                        .IsUnique();

                    b.ToTable("Countries", (string)null);
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentId"));

                    b.Property<int>("DocTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("DocumentId");

                    b.HasIndex("DocTypeId");

                    b.HasIndex("StudentId");

                    b.ToTable("Documents", (string)null);
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.DocumentType", b =>
                {
                    b.Property<int>("DocumentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentTypeId"));

                    b.Property<string>("DocumentTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DocumentTypeId");

                    b.HasIndex("DocumentTypeName")
                        .IsUnique();

                    b.ToTable("DocumentTypes", (string)null);
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<string>("FourthName")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<string>("ThirdName")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.HasIndex("FirstName", "SecondName", "ThirdName", "FourthName");

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("EventId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Events", (string)null);
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Governorate", b =>
                {
                    b.Property<int>("GovernorateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GovernorateId"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("GovernorateId");

                    b.HasIndex("CountryId", "NameAr")
                        .IsUnique();

                    b.HasIndex("CountryId", "NameEn")
                        .IsUnique();

                    b.ToTable("Governorates", (string)null);
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Guardian", b =>
                {
                    b.Property<int>("GuardianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GuardianId"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<string>("FourthName")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<string>("GuardianRelation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<string>("ThirdName")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.HasKey("GuardianId");

                    b.HasIndex("NationalId")
                        .IsUnique();

                    b.HasIndex("FirstName", "SecondName", "ThirdName", "FourthName");

                    b.ToTable("Guardians", (string)null);
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.HighSchool", b =>
                {
                    b.Property<int>("HighSchoolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HighSchoolId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("HighSchoolId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("HighSchools", (string)null);
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ResetCode")
                        .HasMaxLength(2000)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Identity.UserRefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRefreshTokens", (string)null);
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"));

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("date");

                    b.Property<int>("ForMonth")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("RequiredAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValue("Pending");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("InvoiceId");

                    b.HasIndex("ForMonth");

                    b.HasIndex("Status");

                    b.HasIndex("StudentId", "ForMonth", "InvoiceType")
                        .HasDatabaseName("IX_Invoice_Student_Month_Type");

                    b.ToTable("Invoices", null, t =>
                        {
                            t.HasCheckConstraint("CK_Invoice_ForMonth", "[ForMonth] BETWEEN 1 AND 12");

                            t.HasCheckConstraint("CK_Invoice_RequiredAmount", "[RequiredAmount] > 0");
                        });
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Issue", b =>
                {
                    b.Property<int>("IssueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IssueId"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("IssueTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Response")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("IssueId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("IssueTypeId");

                    b.HasIndex("StudentId");

                    b.ToTable("Issues", (string)null);
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.IssueType", b =>
                {
                    b.Property<int>("IssueTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IssueTypeId"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IssueTypeId");

                    b.HasIndex("TypeName")
                        .IsUnique();

                    b.ToTable("IssueTypes", (string)null);
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.NewStudent", b =>
                {
                    b.Property<int>("NewStudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NewStudentId"));

                    b.Property<int>("HighSchoolId")
                        .HasColumnType("int");

                    b.Property<decimal>("HighSchoolPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("IsOutsideSchool")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("NewStudentId");

                    b.HasIndex("HighSchoolId");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("NewStudents", (string)null);
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("NotificationId");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.OldStudent", b =>
                {
                    b.Property<int>("OldStudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OldStudentId"));

                    b.Property<decimal>("GradePercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("PreviousYearGrade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PreviousYearHosting")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("OldStudentId");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("OldStudents", (string)null);
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Option", b =>
                {
                    b.Property<int>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OptionId"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("OptionId");

                    b.HasIndex("QuestionId", "Text")
                        .IsUnique()
                        .HasDatabaseName("IX_Option_Question_Text");

                    b.ToTable("Options", (string)null);
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("AmountPaid")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentId");

                    b.HasIndex("InvoiceId")
                        .IsUnique()
                        .HasFilter("[InvoiceId] IS NOT NULL");

                    b.HasIndex("PaymentDate");

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<int>("IsRequired")
                        .HasColumnType("int");

                    b.Property<int>("QuestionnaireId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionId");

                    b.HasIndex("QuestionnaireId");

                    b.ToTable("Questions", (string)null);
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Questionnaire", b =>
                {
                    b.Property<int>("QuestionnaireId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionnaireId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ForYear")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("QuestionnaireId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ForYear");

                    b.ToTable("Questionnaires", (string)null);
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Response", b =>
                {
                    b.Property<int>("ResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResponseId"));

                    b.Property<int>("QuestionnaireId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ResponseAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("ResponseId");

                    b.HasIndex("QuestionnaireId");

                    b.HasIndex("StudentId", "QuestionnaireId")
                        .IsUnique()
                        .HasDatabaseName("IX_Response_Student_Questionnaire");

                    b.ToTable("Responses", (string)null);
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomId"));

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal");

                    b.Property<string>("RoomNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.HasKey("RoomId");

                    b.HasIndex("BuildingId", "RoomNumber")
                        .IsUnique();

                    b.ToTable("Rooms", (string)null);
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.RoomPhoto", b =>
                {
                    b.Property<int>("RoomPhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomPhotoId"));

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("RoomPhotoId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomPhotos", (string)null);
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<string>("AcademicStudentCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AcademicYear")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("AddressLine")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<int>("CollegeId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<string>("FourthName")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("GuardianId")
                        .HasColumnType("int");

                    b.Property<bool>("HasSpecialNeeds")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMarried")
                        .HasColumnType("bit");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("PlaceOfBirth")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("QRImagePath")
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)");

                    b.Property<string>("QRText")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Religion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ResidencePlace")
                        .HasColumnType("int");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<string>("Telephone")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("ThirdName")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StudentId");

                    b.HasIndex("AcademicStudentCode")
                        .IsUnique();

                    b.HasIndex("ApplicationId")
                        .IsUnique();

                    b.HasIndex("CollegeId");

                    b.HasIndex("CountryId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("GuardianId");

                    b.HasIndex("NationalId")
                        .IsUnique();

                    b.HasIndex("ResidencePlace");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.HasIndex("FirstName", "SecondName", "ThirdName", "FourthName");

                    b.ToTable("Students", (string)null);
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.StudentHistory", b =>
                {
                    b.Property<int>("StudentHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentHistoryId"));

                    b.Property<DateTime>("From")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("To")
                        .HasColumnType("datetime2");

                    b.HasKey("StudentHistoryId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentHistories", null, t =>
                        {
                            t.HasCheckConstraint("CK_StudentHistory_ToDate_After_FromDate", "[To] IS NULL OR [To] > [From]");
                        });
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.StudentsNotifications", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("StudentId", "NotificationId");

                    b.HasIndex("NotificationId");

                    b.ToTable("StudentsNotifications", (string)null);
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Village", b =>
                {
                    b.Property<int>("VillageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VillageId"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("VillageId");

                    b.HasIndex("CityId", "NameAr")
                        .IsUnique();

                    b.HasIndex("CityId", "NameEn")
                        .IsUnique();

                    b.ToTable("Villages", (string)null);
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Violation", b =>
                {
                    b.Property<int>("ViolationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ViolationId"));

                    b.Property<int>("StudentHistoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ViolationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("ViolationTypeId")
                        .HasColumnType("int");

                    b.HasKey("ViolationId");

                    b.HasIndex("StudentHistoryId");

                    b.HasIndex("ViolationTypeId");

                    b.ToTable("Violations", (string)null);
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.ViolationType", b =>
                {
                    b.Property<int>("ViolationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ViolationTypeId"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("RequiredAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("ViolationLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ViolationTypeId");

                    b.ToTable("ViolationTypes", (string)null);
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Visit", b =>
                {
                    b.Property<int>("VisitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitId"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FourthName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Pending");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("ThirdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("VisitDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("VisitId");

                    b.HasIndex("NationalId");

                    b.HasIndex("StudentId");

                    b.ToTable("Visits", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("UniversityHousingSystem.Data.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("UniversityHousingSystem.Data.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityHousingSystem.Data.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("UniversityHousingSystem.Data.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Answer", b =>
                {
                    b.HasOne("UniversityHousingSystem.Data.Entities.Option", "Option")
                        .WithMany("Answers")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("UniversityHousingSystem.Data.Entities.Question", "Question")
                        .WithOne("Answer")
                        .HasForeignKey("UniversityHousingSystem.Data.Entities.Answer", "QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UniversityHousingSystem.Data.Entities.Response", "Response")
                        .WithMany("Answers")
                        .HasForeignKey("ResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Option");

                    b.Navigation("Question");

                    b.Navigation("Response");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Attendance", b =>
                {
                    b.HasOne("UniversityHousingSystem.Data.Entities.Student", "Student")
                        .WithMany("Attendances")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Building", b =>
                {
                    b.HasOne("UniversityHousingSystem.Data.Entities.Village", "Village")
                        .WithMany("Buildings")
                        .HasForeignKey("VillageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Village");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.City", b =>
                {
                    b.HasOne("UniversityHousingSystem.Data.Entities.Governorate", "Governorate")
                        .WithMany("Cities")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Governorate");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.CollegeDepartment", b =>
                {
                    b.HasOne("UniversityHousingSystem.Data.Entities.College", "College")
                        .WithMany("Departments")
                        .HasForeignKey("CollegeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("College");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Document", b =>
                {
                    b.HasOne("UniversityHousingSystem.Data.Entities.DocumentType", "DocumentType")
                        .WithMany("Documents")
                        .HasForeignKey("DocTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UniversityHousingSystem.Data.Entities.Student", "Student")
                        .WithMany("Documents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DocumentType");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Employee", b =>
                {
                    b.HasOne("UniversityHousingSystem.Data.Entities.Identity.ApplicationUser", "User")
                        .WithOne()
                        .HasForeignKey("UniversityHousingSystem.Data.Entities.Employee", "UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Event", b =>
                {
                    b.HasOne("UniversityHousingSystem.Data.Entities.Employee", "Employee")
                        .WithMany("Events")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Governorate", b =>
                {
                    b.HasOne("UniversityHousingSystem.Data.Entities.Country", "Country")
                        .WithMany("Governorates")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Identity.ApplicationUser", b =>
                {
                    b.HasOne("UniversityHousingSystem.Data.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Identity.UserRefreshToken", b =>
                {
                    b.HasOne("UniversityHousingSystem.Data.Entities.Identity.ApplicationUser", "User")
                        .WithMany("UserRefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Invoice", b =>
                {
                    b.HasOne("UniversityHousingSystem.Data.Entities.Student", "Student")
                        .WithMany("Invoices")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Issue", b =>
                {
                    b.HasOne("UniversityHousingSystem.Data.Entities.Employee", "Employee")
                        .WithMany("Issues")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("UniversityHousingSystem.Data.Entities.IssueType", "IssueType")
                        .WithMany("Issues")
                        .HasForeignKey("IssueTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UniversityHousingSystem.Data.Entities.Student", "Student")
                        .WithMany("Issues")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("IssueType");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.NewStudent", b =>
                {
                    b.HasOne("UniversityHousingSystem.Data.Entities.HighSchool", "HighSchool")
                        .WithMany("NewStudents")
                        .HasForeignKey("HighSchoolId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UniversityHousingSystem.Data.Entities.Student", "Student")
                        .WithOne("NewStudent")
                        .HasForeignKey("UniversityHousingSystem.Data.Entities.NewStudent", "StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("HighSchool");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.OldStudent", b =>
                {
                    b.HasOne("UniversityHousingSystem.Data.Entities.Student", "Student")
                        .WithOne()
                        .HasForeignKey("UniversityHousingSystem.Data.Entities.OldStudent", "StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Option", b =>
                {
                    b.HasOne("UniversityHousingSystem.Data.Entities.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Payment", b =>
                {
                    b.HasOne("UniversityHousingSystem.Data.Entities.Invoice", "Invoice")
                        .WithOne("Payment")
                        .HasForeignKey("UniversityHousingSystem.Data.Entities.Payment", "InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Question", b =>
                {
                    b.HasOne("UniversityHousingSystem.Data.Entities.Questionnaire", "Questionnaire")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questionnaire");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Questionnaire", b =>
                {
                    b.HasOne("UniversityHousingSystem.Data.Entities.Employee", "Employee")
                        .WithMany("Questionnaires")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Response", b =>
                {
                    b.HasOne("UniversityHousingSystem.Data.Entities.Questionnaire", "Questionnaire")
                        .WithMany("Responses")
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UniversityHousingSystem.Data.Entities.Student", "Student")
                        .WithMany("Responses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Questionnaire");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Room", b =>
                {
                    b.HasOne("UniversityHousingSystem.Data.Entities.Building", "Building")
                        .WithMany("Rooms")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.RoomPhoto", b =>
                {
                    b.HasOne("UniversityHousingSystem.Data.Entities.Room", "Room")
                        .WithMany("RoomPhotos")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Student", b =>
                {
                    b.HasOne("UniversityHousingSystem.Data.Entities.Application", "Application")
                        .WithOne("Student")
                        .HasForeignKey("UniversityHousingSystem.Data.Entities.Student", "ApplicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UniversityHousingSystem.Data.Entities.College", "College")
                        .WithMany("Students")
                        .HasForeignKey("CollegeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UniversityHousingSystem.Data.Entities.Country", "Country")
                        .WithMany("Students")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UniversityHousingSystem.Data.Entities.Guardian", "Guardian")
                        .WithMany("Students")
                        .HasForeignKey("GuardianId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UniversityHousingSystem.Data.Entities.Village", "Village")
                        .WithMany("Students")
                        .HasForeignKey("ResidencePlace")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UniversityHousingSystem.Data.Entities.Room", "Room")
                        .WithMany("Students")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("UniversityHousingSystem.Data.Entities.Identity.ApplicationUser", "User")
                        .WithOne("Student")
                        .HasForeignKey("UniversityHousingSystem.Data.Entities.Student", "UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Application");

                    b.Navigation("College");

                    b.Navigation("Country");

                    b.Navigation("Guardian");

                    b.Navigation("Room");

                    b.Navigation("User");

                    b.Navigation("Village");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.StudentHistory", b =>
                {
                    b.HasOne("UniversityHousingSystem.Data.Entities.Student", "Student")
                        .WithMany("Histories")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.StudentsNotifications", b =>
                {
                    b.HasOne("UniversityHousingSystem.Data.Entities.Notification", "Notification")
                        .WithMany("StudentsNotifications")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityHousingSystem.Data.Entities.Student", "Student")
                        .WithMany("StudentsNotifications")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Village", b =>
                {
                    b.HasOne("UniversityHousingSystem.Data.Entities.City", "City")
                        .WithMany("Villages")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Violation", b =>
                {
                    b.HasOne("UniversityHousingSystem.Data.Entities.StudentHistory", "StudentHistory")
                        .WithMany("Violations")
                        .HasForeignKey("StudentHistoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UniversityHousingSystem.Data.Entities.ViolationType", "ViolationType")
                        .WithMany("Violations")
                        .HasForeignKey("ViolationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StudentHistory");

                    b.Navigation("ViolationType");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Visit", b =>
                {
                    b.HasOne("UniversityHousingSystem.Data.Entities.Student", "Student")
                        .WithMany("Visits")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Application", b =>
                {
                    b.Navigation("Student")
                        .IsRequired();
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Building", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.City", b =>
                {
                    b.Navigation("Villages");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.College", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Country", b =>
                {
                    b.Navigation("Governorates");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.DocumentType", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Employee", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Issues");

                    b.Navigation("Questionnaires");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Governorate", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Guardian", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.HighSchool", b =>
                {
                    b.Navigation("NewStudents");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Identity.ApplicationUser", b =>
                {
                    b.Navigation("Student");

                    b.Navigation("UserRefreshTokens");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Invoice", b =>
                {
                    b.Navigation("Payment");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.IssueType", b =>
                {
                    b.Navigation("Issues");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Notification", b =>
                {
                    b.Navigation("StudentsNotifications");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Option", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Question", b =>
                {
                    b.Navigation("Answer");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Questionnaire", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("Responses");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Response", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Room", b =>
                {
                    b.Navigation("RoomPhotos");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Student", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("Documents");

                    b.Navigation("Histories");

                    b.Navigation("Invoices");

                    b.Navigation("Issues");

                    b.Navigation("NewStudent");

                    b.Navigation("Responses");

                    b.Navigation("StudentsNotifications");

                    b.Navigation("Visits");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.StudentHistory", b =>
                {
                    b.Navigation("Violations");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.Village", b =>
                {
                    b.Navigation("Buildings");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("UniversityHousingSystem.Data.Entities.ViolationType", b =>
                {
                    b.Navigation("Violations");
                });
#pragma warning restore 612, 618
        }
    }
}
